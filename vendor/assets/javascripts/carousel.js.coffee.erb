# An image carousel. Loads images from an Ajax endpoint and displays them in a
# grid. Clicking an image reveals it in a lightbox. The carousel uses infinite
# scrolling.
#
# The endpoint must return data in a specific format; see the README.md file.
#
# Use the `$(...).carousel(...)` method for a more jQuery-like syntax.
#
class Carousel

  # Creates a new carousel manager.
  #
  # @param [jQuery element array] element The element to render the carousel
  # into.
  # @param [String] url The Ajax JSON endpoint that returns image metadata.
  # @param [String] orientation Either 'horizontal' or 'vertical'.
  # @param [Object] options Additional options.
  # @option options [Boolean] captions (true) Whether to display captions next
  #   to images. (Captions are always displayed in lightboxes.)
  # @option options [Boolean] lightboxes (true) Whether to enable lightbox
  #   functionality.
  #
  constructor: (@element, @url, @orientation, @options={}) ->
    @options = $.extend({ captions: true, lightboxes: true }, @options)
    @element.addClass "carousel-#{@orientation}"
    @data = []

    this.refresh()
    this.setScroll()

  # Reloads images from the endpoint.
  #
  refresh: ->
    this.clear()
    $.ajax @url,
      dataType: 'json',
      error: (xhr, status, error) =>
        this.setError "Couldn't load photos: #{if status == 'error' then error else status}."
      success: (data) =>
        this.populate data

  # Empties this carousel of images.
  #
  clear: ->
    @element.find('>li').remove()
    @data = []

  # @private
  populate: (data) ->
    @data = @data.concat(data) # must clone it

    if @data.length == 0
      this.setNote "No photos yet."
      return

    $.each data, (_, photo) =>
      li = $('<li/>').appendTo(@element)
      fig = $('<figure/>').appendTo(li)
      a = $('<a/>').attr(href: photo.url, title: photo.caption).appendTo(fig)
      $('<img/>').attr('src', photo.preview_url).appendTo a
      $('<figcaption/>').text(photo.caption).appendTo(fig) if @options['captions'] and photo.caption

    if @options['lightboxes']
      @element.find('a').lightBox
        imageLoading: '<%= image_path "lightbox/loading.gif" %>'
        imageBtnClose: '<%= image_path "lightbox/close.gif" %>'
        imageBtnPrev: '<%= image_path "lightbox/prev.gif" %>'
        imageBtnNext: '<%= image_path "lightbox/next.gif" %>'
        imageBlank: '<%= image_path "lightbox/blank.gif" %>'
        txtImage: ''

    this.loadNextPage() if this.noScroll() and data.length > 0

  # Replaces the contents of this carousel with an error message.
  #
  # @param [String] error The error message.
  setError: (error) ->
    this.clear()
    li = $('<li/>').addClass('center').appendTo @element
    $('<p/>').addClass('error').text(error).appendTo li

  # Replaces the contents of this carousel with a message.
  #
  # @param [String] note The message.
  #
  setNote: (note) ->
    this.clear()
    li = $('<li/>').addClass('center').appendTo @element
    $('<p/>').addClass('note').text(note).appendTo li

  # @private
  setScroll: ->
    @element.scroll =>
      this.loadNextPage() if this.isAtEnd()

  # @private
  noScroll: ->
    switch @orientation
      when 'horizontal' then @element.width() == @element[0].scrollWidth
      when 'vertical' then @element.height() == @element[0].scrollHeight

  # @private
  isAtEnd: ->
    switch @orientation
      when 'horizontal' then @element.scrollLeft() == @element[0].scrollWidth - @element.width()
      when 'vertical' then @element.scrollTop() == @element[0].scrollheight - @element.height()

  # @private
  loadNextPage: ->
    return if @data.length == 0
    $.ajax @url,
      data: { last_record: @data[@data.length - 1].id }
      dataType: 'json'
      error: (xhr, status, error) =>
        this.setError "Couldn't load photos: #{if status == 'error' then error else status}."
      success: (data) =>
        this.populate data

$.fn.extend

  # Renders a new carousel into the target.
  # @param [String] url The Ajax JSON endpoint that returns image metadata.
  # @param [String] orientation Either 'horizontal' or 'vertical'.
  # @param [Object] options Additional options to pass to {Carousel}.
  # @return [Carousel] The new carousel manager.
  #
  carousel: (url, orient, options={}) ->
    new Carousel(this, url, orient, options)
